{"version":3,"sources":["redux/userList/userListActions.js","redux/filmsSearch/filmsSearchOperations.js","redux/filmsSearch/filmsSearchActions.js","pages/FilmPage/FilmPage.js","pages/FilmPage/FilmPageContainer.js"],"names":["__webpack_require__","d","__webpack_exports__","addFilmToFavoritesActionCreator","markAsWatchedActionCreator","deleteFromFavorites","deleteFromWatched","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","film","type","actionTypes","ADD_TO_FAVORITES","payload","MARK_WATCHED","id","DElETE_FROM_FAVORITES","DELETE_FROM_WATCHED","API_KEY","fetchFilms","query","dispatch","FILM_LOADING","axios","get","concat","then","response","films","data","results","FILM_SEARCH_SUCCESS","catch","error","FILM_SEARCH_ERROR","filmsErrorActionCreator","FilmPage","_ref","match","addFilmToFavorites","markAsWatched","favoritesList","watchedList","_useState","useState","_useState2","Object","slicedToArray","chosenFilm","setChosenFilm","useEffect","find","params","title","filmsResult","Number","console","log","react_default","a","createElement","Fragment","src","poster_path","alt","vote_average","overview","onClick","connect","state"],"mappings":"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","file":"static/js/film-page.df3ecc52.chunk.js","sourcesContent":["import actionTypes from '../actionTypes';\n\nexport const addFilmToFavoritesActionCreator = film => ({\n  type: actionTypes.ADD_TO_FAVORITES,\n  payload: {\n    film,\n  },\n});\n\nexport const markAsWatchedActionCreator = film => ({\n  type: actionTypes.MARK_WATCHED,\n  payload: {\n    film,\n  },\n});\n\nexport const deleteFromFavorites = id => ({\n  type: actionTypes.DElETE_FROM_FAVORITES,\n  payload: {\n    id,\n  },\n});\n\nexport const deleteFromWatched = id => ({\n  type: actionTypes.DELETE_FROM_WATCHED,\n  payload: {\n    id,\n  },\n});\n","import axios from 'axios';\nimport {\n  filmsLoadingActionCreator,\n  filmsSuccessActionCreator,\n  filmsErrorActionCreator,\n} from './filmsSearchActions';\n\nexport const API_KEY = 'bcf1e9109b9838d979a3eda6f6128d7e';\n\nconst fetchFilms = query => dispatch => {\n  dispatch(filmsLoadingActionCreator());\n  axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`,\n    )\n    .then(response =>\n      dispatch(filmsSuccessActionCreator(response.data.results)),\n    )\n    .catch(error => dispatch(filmsErrorActionCreator(error)));\n};\nexport default fetchFilms;\n","import actionTypes from '../actionTypes';\n\nexport const filmsLoadingActionCreator = () => ({\n  type: actionTypes.FILM_LOADING,\n});\nexport const filmsSuccessActionCreator = films => ({\n  type: actionTypes.FILM_SEARCH_SUCCESS,\n  payload: {\n    films,\n  },\n});\nexport const filmsErrorActionCreator = error => ({\n  type: actionTypes.FILM_SEARCH_ERROR,\n  payload: {\n    error,\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { API_KEY } from '../../redux/filmsSearch/filmsSearchOperations';\n\nconst FilmPage = ({\n  films,\n  match,\n  addFilmToFavorites,\n  markAsWatched,\n  favoritesList,\n  watchedList,\n  deleteFromFavorites,\n  deleteFromWatched,\n}) => {\n  const [chosenFilm, setChosenFilm] = useState('');\n  useEffect(\n    () =>\n      setChosenFilm(films && films.find(film => film.id === match.params.id)),\n    // eslint-disable-next-line\n    [match.params.id],\n  );\n  if (!chosenFilm) {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${match.params.title}&include_adult=false`,\n      )\n      .then(response => {\n        const filmsResult = response.data.results;\n        setChosenFilm(\n          filmsResult.find(film => film.id === Number(match.params.id)),\n        );\n      })\n      .catch(error => console.log(error));\n  }\n\n  const addToFavorites = () => {\n    addFilmToFavorites(chosenFilm);\n  };\n  const addToWatched = () => {\n    markAsWatched(chosenFilm);\n  };\n  const deleteChosenFilmFromFavorites = () => {\n    deleteFromFavorites(chosenFilm.id);\n  };\n  const deleteChosenFilmFromWatched = () => {\n    deleteFromWatched(chosenFilm.id);\n  };\n  return (\n    <section>\n      {' '}\n      {chosenFilm && (\n        <>\n          <h2> {chosenFilm.title} </h2>{' '}\n          <img\n            src={\n              chosenFilm.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${chosenFilm.poster_path}`\n                : 'https://www.viser.edu.rs/images/no_photo.jpeg'\n            }\n            alt=\"film poster\"\n          />\n          <p> {chosenFilm.vote_average || 'No votes'} </p>{' '}\n          <p> {chosenFilm.overview || 'No overview available'} </p>{' '}\n          {favoritesList.find(\n            film => Number(film.id) === Number(chosenFilm.id),\n          ) ? (\n            <button type=\"button\" onClick={deleteChosenFilmFromFavorites}>\n              Delete from fav{' '}\n            </button>\n          ) : (\n            <button type=\"button\" onClick={addToFavorites}>\n              Add to favg{' '}\n            </button>\n          )}{' '}\n          {watchedList.find(\n            film => Number(film.id) === Number(chosenFilm.id),\n          ) ? (\n            <button type=\"button\" onClick={deleteChosenFilmFromWatched}>\n              Delete from watched{' '}\n            </button>\n          ) : (\n            <button type=\"button\" onClick={addToWatched}>\n              Add to watched{' '}\n            </button>\n          )}{' '}\n        </>\n      )}{' '}\n    </section>\n  );\n};\nFilmPage.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  addFilmToFavorites: PropTypes.func.isRequired,\n  markAsWatched: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  favoritesList: PropTypes.arrayOf().isRequired,\n  watchedList: PropTypes.arrayOf().isRequired,\n  deleteFromFavorites: PropTypes.func.isRequired,\n  deleteFromWatched: PropTypes.func.isRequired,\n};\nexport default FilmPage;\n","import { connect } from 'react-redux';\nimport FilmPage from './FilmPage';\nimport fetchFilms from '../../redux/filmsSearch/filmsSearchOperations';\nimport {\n  addFilmToFavoritesActionCreator,\n  markAsWatchedActionCreator,\n  deleteFromFavorites,\n  deleteFromWatched,\n} from '../../redux/userList/userListActions';\n\nconst mapStateToProps = state => ({\n  films: state.films,\n  favoritesList: state.favoritesList,\n  watchedList: state.watchedList,\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchFilms: query => dispatch(fetchFilms(query)),\n  addFilmToFavorites: film => dispatch(addFilmToFavoritesActionCreator(film)),\n  markAsWatched: film => dispatch(markAsWatchedActionCreator(film)),\n  deleteFromFavorites: id => dispatch(deleteFromFavorites(id)),\n  deleteFromWatched: id => dispatch(deleteFromWatched(id)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(FilmPage);\n"],"sourceRoot":""}