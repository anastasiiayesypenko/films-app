{"version":3,"sources":["redux/userList/userListActions.js","redux/filmsSearch/filmsSearchOperations.js","redux/filmsSearch/filmsSearchActions.js","pages/FilmPage/FilmPage.js","pages/FilmPage/FilmPageContainer.js"],"names":["__webpack_require__","d","__webpack_exports__","addFilmToFavoritesActionCreator","markAsWatchedActionCreator","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","film","type","actionTypes","ADD_TO_FAVORITES","payload","MARK_WATCHED","fetchFilms","query","dispatch","FILM_LOADING","axios","get","concat","then","response","films","data","results","FILM_SEARCH_SUCCESS","catch","error","FILM_SEARCH_ERROR","filmsErrorActionCreator","FilmPage","_ref","match","addFilmToFavorites","markAsWatched","favoritesList","watchedList","length","params","title","chosenFilm","find","id","Number","addToFavorites","addToWatched","react_default","a","createElement","Fragment","src","poster_path","alt","vote_average","overview","includes","onClick","connect","state"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAA,IAAAC,EAAAL,EAAA,GAEaG,EAAkC,SAAAG,GAAI,MAAK,CACtDC,KAAMC,IAAYC,iBAClBC,QAAS,CACPJ,UAISF,EAA6B,SAAAE,GAAI,MAAK,CACjDC,KAAMC,IAAYG,aAClBD,QAAS,CACPJ,uECQWM,IAXI,SAAAC,GAAK,OAAI,SAAAC,GAC1BA,ECR8C,CAC9CP,KAAMC,IAAYO,eDQlBC,IACGC,IADH,qDAAAC,OAJc,mCAId,WAAAA,OAE0EL,EAF1E,yBAIGM,KAAK,SAAAC,GAAQ,OACZN,GCXmCO,EDWAD,EAASE,KAAKC,QCXJ,CACjDhB,KAAMC,IAAYgB,oBAClBd,QAAS,CACPW,YAHqC,IAAAA,IDapCI,MAAM,SAAAC,GAAK,OAAIZ,ECPmB,SAAAY,GAAK,MAAK,CAC/CnB,KAAMC,IAAYmB,kBAClBjB,QAAS,CACPgB,UDIyBE,CAAwBF,4EEyDtCG,EAxEE,SAAAC,GAQX,IAPJT,EAOIS,EAPJT,MACAT,EAMIkB,EANJlB,WACAmB,EAKID,EALJC,MACAC,EAIIF,EAJJE,mBACAC,EAGIH,EAHJG,cACAC,EAEIJ,EAFJI,cACAC,EACIL,EADJK,YAEqB,IAAjBd,EAAMe,QACRxB,EAAWmB,EAAMM,OAAOC,OAE1B,IAAMC,EAAalB,EAAMmB,KAAK,SAAAlC,GAAI,OAAIA,EAAKmC,KAAOC,OAAOX,EAAMM,OAAOI,MAChEE,EAAiB,WACrBX,EAAmBO,IAEfK,EAAe,WACnBX,EAAcM,IAEhB,OACEM,EAAAC,EAAAC,cAAA,eACG,IACAR,GACCM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,cAAMR,EAAWD,MAAjB,KAA8B,IAC9BO,EAAAC,EAAAC,cAAA,OACEE,IACEV,EAAWW,YAAX,mCAAAhC,OACuCqB,EAAWW,aAC9C,gDAENC,IAAI,gBAENN,EAAAC,EAAAC,cAAA,aAAKR,EAAWa,cAAgB,WAAhC,KAAiD,IACjDP,EAAAC,EAAAC,cAAA,aAAKR,EAAWc,UAAY,wBAA5B,KAA0D,IACzDnB,EAAcoB,SAASf,GACtBM,EAAAC,EAAAC,cAAA,UAAQxC,KAAK,SAASgD,QAASZ,GAA/B,kBACkB,KAGlBE,EAAAC,EAAAC,cAAA,UAAQxC,KAAK,SAASgD,QAASZ,GAA/B,aACa,KAEZ,IACFR,EAAYmB,SAASf,GACpBM,EAAAC,EAAAC,cAAA,UAAQxC,KAAK,SAASgD,QAASX,GAA/B,sBACsB,KAGtBC,EAAAC,EAAAC,cAAA,UAAQxC,KAAK,SAASgD,QAASX,GAA/B,iBACiB,KAEhB,KAEJ,sBCvCMY,sBAVS,SAAAC,GAAK,MAAK,CAChCpC,MAAOoC,EAAMpC,MACba,cAAeuB,EAAMvB,cACrBC,YAAasB,EAAMtB,cAEM,SAAArB,GAAQ,MAAK,CACtCF,WAAY,SAAAC,GAAK,OAAIC,EAASF,YAAWC,KACzCmB,mBAAoB,SAAA1B,GAAI,OAAIQ,EAASX,YAAgCG,KACrE2B,cAAe,SAAA3B,GAAI,OAAIQ,EAASV,YAA2BE,OAE9CkD,CAGb3B","file":"static/js/film-page.8661cacf.chunk.js","sourcesContent":["import actionTypes from '../actionTypes';\n\nexport const addFilmToFavoritesActionCreator = film => ({\n  type: actionTypes.ADD_TO_FAVORITES,\n  payload: {\n    film,\n  },\n});\n\nexport const markAsWatchedActionCreator = film => ({\n  type: actionTypes.MARK_WATCHED,\n  payload: {\n    film,\n  },\n});\n","import axios from 'axios';\nimport {\n  filmsLoadingActionCreator,\n  filmsSuccessActionCreator,\n  filmsErrorActionCreator,\n} from './filmsSearchActions';\n\nconst API_KEY = 'bcf1e9109b9838d979a3eda6f6128d7e';\n\nconst fetchFilms = query => dispatch => {\n  dispatch(filmsLoadingActionCreator());\n  axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`,\n    )\n    .then(response =>\n      dispatch(filmsSuccessActionCreator(response.data.results)),\n    )\n    .catch(error => dispatch(filmsErrorActionCreator(error)));\n};\nexport default fetchFilms;\n","import actionTypes from '../actionTypes';\n\nexport const filmsLoadingActionCreator = () => ({\n  type: actionTypes.FILM_LOADING,\n});\nexport const filmsSuccessActionCreator = films => ({\n  type: actionTypes.FILM_SEARCH_SUCCESS,\n  payload: {\n    films,\n  },\n});\nexport const filmsErrorActionCreator = error => ({\n  type: actionTypes.FILM_SEARCH_ERROR,\n  payload: {\n    error,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FilmPage = ({\n  films,\n  fetchFilms,\n  match,\n  addFilmToFavorites,\n  markAsWatched,\n  favoritesList,\n  watchedList,\n}) => {\n  if (films.length === 0) {\n    fetchFilms(match.params.title);\n  }\n  const chosenFilm = films.find(film => film.id === Number(match.params.id));\n  const addToFavorites = () => {\n    addFilmToFavorites(chosenFilm);\n  };\n  const addToWatched = () => {\n    markAsWatched(chosenFilm);\n  };\n  return (\n    <section>\n      {' '}\n      {chosenFilm && (\n        <>\n          <h2> {chosenFilm.title} </h2>{' '}\n          <img\n            src={\n              chosenFilm.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${chosenFilm.poster_path}`\n                : 'https://www.viser.edu.rs/images/no_photo.jpeg'\n            }\n            alt=\"film poster\"\n          />\n          <p> {chosenFilm.vote_average || 'No votes'} </p>{' '}\n          <p> {chosenFilm.overview || 'No overview available'} </p>{' '}\n          {favoritesList.includes(chosenFilm) ? (\n            <button type=\"button\" onClick={addToFavorites}>\n              Delete from fav{' '}\n            </button>\n          ) : (\n            <button type=\"button\" onClick={addToFavorites}>\n              Add to fav{' '}\n            </button>\n          )}{' '}\n          {watchedList.includes(chosenFilm) ? (\n            <button type=\"button\" onClick={addToWatched}>\n              Delete from watched{' '}\n            </button>\n          ) : (\n            <button type=\"button\" onClick={addToWatched}>\n              Add to watched{' '}\n            </button>\n          )}{' '}\n        </>\n      )}{' '}\n    </section>\n  );\n};\nFilmPage.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchFilms: PropTypes.func.isRequired,\n  addFilmToFavorites: PropTypes.func.isRequired,\n  markAsWatched: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n  favoritesList: PropTypes.arrayOf().isRequired,\n  watchedList: PropTypes.arrayOf().isRequired,\n};\nexport default FilmPage;\n","import { connect } from 'react-redux';\nimport FilmPage from './FilmPage';\nimport fetchFilms from '../../redux/filmsSearch/filmsSearchOperations';\nimport {\n  addFilmToFavoritesActionCreator,\n  markAsWatchedActionCreator,\n} from '../../redux/userList/userListActions';\n\nconst mapStateToProps = state => ({\n  films: state.films,\n  favoritesList: state.favoritesList,\n  watchedList: state.watchedList,\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchFilms: query => dispatch(fetchFilms(query)),\n  addFilmToFavorites: film => dispatch(addFilmToFavoritesActionCreator(film)),\n  markAsWatched: film => dispatch(markAsWatchedActionCreator(film)),\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(FilmPage);\n"],"sourceRoot":""}